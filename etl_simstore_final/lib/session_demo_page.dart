import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../features/auth/auth.dart';

/// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Auto-logout Session Management
/// ‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö auto-logout
class SessionDemoPage extends ConsumerStatefulWidget {
  const SessionDemoPage({super.key});

  @override
  ConsumerState<SessionDemoPage> createState() => _SessionDemoPageState();
}

class _SessionDemoPageState extends ConsumerState<SessionDemoPage> {
  @override
  void initState() {
    super.initState();

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ provider reference ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö auto-logout
    WidgetsBinding.instance.addPostFrameCallback((_) {
      // ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô ConsumerWidget context
      // SessionManager.setProviderRef(ref); // ‡∏à‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô build method ‡πÅ‡∏ó‡∏ô
    });
  }

  void _simulateUserActivity() {
    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    SessionManager.updateActivity();

    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('üéØ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÅ‡∏•‡πâ‡∏ß - Timer ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÉ‡∏´‡∏°‡πà'),
        backgroundColor: Colors.green,
        duration: Duration(seconds: 2),
      ),
    );
  }

  void _testAutoLogout() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('‡∏ó‡∏î‡∏™‡∏≠‡∏ö Auto-logout'),
        content: const Text(
          '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞ logout ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 60 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß\n\n'
          '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ:\n'
          '1. ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏ó‡∏¥‡πâ‡∏á‡πÑ‡∏ß‡πâ 60+ ‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà\n'
          '2. ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô SessionManager ‡πÄ‡∏õ‡πá‡∏ô 1-2 ‡∏ô‡∏≤‡∏ó‡∏µ\n\n'
          '‡πÄ‡∏°‡∏∑‡πà‡∏≠ auto-logout ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞:\n'
          '‚Ä¢ ‡∏•‡∏ö session ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å storage\n'
          '‚Ä¢ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï auth state ‡πÄ‡∏õ‡πá‡∏ô logged out\n'
          '‚Ä¢ ‡πÅ‡∏™‡∏î‡∏á dialog ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final authState = ref.watch(authProvider);
    final isAuthenticated = ref.watch(isAuthenticatedProvider);

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ provider reference ‡πÉ‡∏ô build method
    SessionManager.setProviderRef(ref);

    return Scaffold(
      appBar: AppBar(
        title: const Text('Session Management Demo'),
        backgroundColor: Colors.blue.shade100,
        actions: [
          if (isAuthenticated)
            IconButton(
              onPressed: () {
                ref.read(authProvider.notifier).signOut();
              },
              icon: const Icon(Icons.logout),
              tooltip: 'Logout',
            ),
        ],
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // Auth Status Card
            Card(
              color: isAuthenticated
                  ? Colors.green.shade50
                  : Colors.red.shade50,
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  children: [
                    Icon(
                      isAuthenticated
                          ? Icons.security
                          : Icons.security_outlined,
                      size: 48,
                      color: isAuthenticated ? Colors.green : Colors.red,
                    ),
                    const SizedBox(height: 8),
                    Text(
                      isAuthenticated
                          ? '‡ªÄ‡∫Ç‡∫ª‡ªâ‡∫≤‡∫™‡∫π‡ªà‡∫•‡∫∞‡∫ö‡∫ª‡∫ö‡ªÅ‡∫•‡ªâ‡∫ß'
                          : '‡∫ç‡∫±‡∫á‡∫ö‡ªç‡ªà‡ªÑ‡∫î‡ªâ‡ªÄ‡∫Ç‡∫ª‡ªâ‡∫≤‡∫™‡∫π‡ªà‡∫•‡∫∞‡∫ö‡∫ª‡∫ö',
                      style: Theme.of(context).textTheme.headlineSmall
                          ?.copyWith(
                            color: isAuthenticated ? Colors.green : Colors.red,
                            fontWeight: FontWeight.bold,
                          ),
                    ),
                    if (authState.user != null)
                      Text(
                        authState.user!.email ?? 'No email',
                        style: const TextStyle(color: Colors.grey),
                      ),
                  ],
                ),
              ),
            ),

            const SizedBox(height: 16),

            // Session Info Widget (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ login ‡πÅ‡∏•‡πâ‡∏ß)
            if (isAuthenticated) ...[
              const SessionInfoWidget(),
              const SizedBox(height: 16),

              // Action Buttons
              Card(
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      Text(
                        '‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Session Management',
                        style: Theme.of(context).textTheme.titleLarge?.copyWith(
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 16),

                      // Simulate Activity Button
                      ElevatedButton.icon(
                        onPressed: _simulateUserActivity,
                        icon: const Icon(Icons.touch_app),
                        label: const Text('‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.blue,
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(vertical: 12),
                        ),
                      ),

                      const SizedBox(height: 8),

                      // Test Auto-logout Info Button
                      OutlinedButton.icon(
                        onPressed: _testAutoLogout,
                        icon: const Icon(Icons.info_outline),
                        label: const Text('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Auto-logout'),
                        style: OutlinedButton.styleFrom(
                          foregroundColor: Colors.orange,
                          padding: const EdgeInsets.symmetric(vertical: 12),
                        ),
                      ),

                      const SizedBox(height: 16),

                      // Info Text
                      Container(
                        padding: const EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          color: Colors.blue.shade50,
                          borderRadius: BorderRadius.circular(8),
                          border: Border.all(color: Colors.blue.shade200),
                        ),
                        child: const Text(
                          'üí° Tips:\n'
                          '‚Ä¢ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï timer\n'
                          '‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞ logout ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 60 ‡∏ô‡∏≤‡∏ó‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß\n'
                          '‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô, ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° ‡∏à‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï timer ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥',
                          style: TextStyle(fontSize: 14),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ] else ...[
              // Login Example Widget (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà login)
              const AuthExampleWidget(),
            ],
          ],
        ),
      ),
    );
  }
}
